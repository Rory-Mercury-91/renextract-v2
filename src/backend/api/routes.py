# src/backend/api/routes.py
"""Routes consolid√©es pour l'API RenExtract v2
Toutes les routes sont regroup√©es dans ce fichier pour une meilleure organisation
"""

import logging
import os
import platform
import subprocess
import tkinter as tk
from collections import defaultdict
from tkinter import filedialog

from flask import Blueprint, current_app, jsonify, request, send_from_directory

from src.backend.core.coherence import CoherenceChecker

# Import des services
from src.backend.core.extractor import TextExtractor
from src.backend.core.project import ProjectManager
from src.backend.core.reconstructor import FileReconstructor
from src.backend.services.backup import BackupManager
from src.backend.services.config import AppConfig
from src.backend.services.update import UpdateManager

logger = logging.getLogger(__name__)

# Cr√©ation du blueprint principal
API = Blueprint("api", __name__)

# ============================================================================
# ROUTES PRINCIPALES
# ============================================================================


@API.route("/api/health")
def health_check():
    """V√©rification de l'√©tat de l'API"""
    return jsonify({"status": "healthy", "message": "RenExtract v2 API is running"})


# ============================================================================
# ROUTES D'EXTRACTION
# ============================================================================


@API.route("/api/extraction/extract", methods=["POST"])
def extract_texts():
    """Extraction de textes"""
    try:
        data = request.get_json()
        if not data or "file_content" not in data or "filepath" not in data:
            return jsonify({"success": False, "error": "Contenu de fichier et chemin requis"}), 400

        filepath = data["filepath"]

        # Utiliser l'extracteur
        extractor = TextExtractor(cache_size=1000)
        result = extractor.extract_texts_streaming(filepath, batch_size=100)

        # Convertir le g√©n√©rateur en liste pour la r√©ponse
        results = list(result)

        return jsonify({"success": True, "results": results, "extracted_count": len(results)})

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur extraction: %s", e)
        return jsonify({"success": False, "error": f"Erreur lors de l'extraction: {e!s}"}), 500


@API.route("/api/extraction/validate-file", methods=["POST"])
def validate_extraction_file():
    """Validation d'un fichier d'extraction"""
    try:
        data = request.get_json()
        if not data or "filepath" not in data:
            return jsonify({"success": False, "error": "Chemin de fichier requis"}), 400

        filepath = data["filepath"]

        if not os.path.exists(filepath):
            return jsonify({"success": False, "error": "Fichier introuvable"}), 404

        # Validation basique
        with open(filepath, encoding="utf-8") as f:
            content = f.read()

        return jsonify(
            {
                "success": True,
                "file_size": len(content),
                "line_count": len(content.splitlines()),
                "is_valid": True,
            },
        )

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur validation: %s", e)
        return jsonify({"success": False, "error": f"Erreur lors de la validation: {e!s}"}), 500


@API.route("/api/extraction/get-settings", methods=["GET"])
def get_extraction_settings():
    """R√©cup√®re les param√®tres d'extraction"""
    try:
        # Charger les param√®tres depuis la configuration
        settings = AppConfig.load_settings_from_disk()
        extraction_settings = settings.get("extraction", {})

        # Param√®tres par d√©faut
        default_settings = {
            "detect_duplicates": True,
            "code_prefix": "code",
            "asterisk_prefix": "asterisk",
            "tilde_prefix": "tilde",
            "empty_prefix": "empty",
        }

        # Fusionner avec les param√®tres par d√©faut
        final_settings = {**default_settings, **extraction_settings}

        return jsonify({"success": True, "settings": final_settings})

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur r√©cup√©ration param√®tres extraction: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


@API.route("/api/extraction/set-settings", methods=["POST"])
def set_extraction_settings():
    """Met √† jour les param√®tres d'extraction"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "error": "Param√®tres requis"}), 400

        # Charger les param√®tres actuels
        current_settings = AppConfig.load_settings_from_disk()

        # Mettre √† jour les param√®tres d'extraction
        if "extraction" not in current_settings:
            current_settings["extraction"] = {}

        current_settings["extraction"].update(data)

        # Sauvegarder
        AppConfig.save_settings_to_disk(current_settings)

        return jsonify({"success": True, "message": "Param√®tres d'extraction mis √† jour"})
    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur mise √† jour param√®tres extraction: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


@API.route("/api/extraction/open-file", methods=["POST"])
def open_extraction_file():
    """Ouvre un fichier dans l'√©diteur externe configur√©"""
    try:
        data = request.get_json()
        logger.info("üîç open_extraction_file - Donn√©es re√ßues: %s", data)

        if not data or "filepath" not in data:
            logger.error("‚ùå open_extraction_file - Chemin de fichier manquant")
            return jsonify({"success": False, "error": "Chemin de fichier requis"}), 400

        filepath = data["filepath"]
        line_number = data.get("line_number", None)

        logger.info("üîç open_extraction_file - Chemin: %s, Ligne: %s", filepath, line_number)

        # Convertir le chemin Windows en chemin Linux si n√©cessaire
        if filepath.startswith("B:\\"):
            # Essayer diff√©rentes conversions WSL
            possible_paths = [
                # Conversion standard WSL
                filepath.replace("B:\\", "/mnt/b/").replace("\\", "/"),
                # Conversion alternative
                filepath.replace("B:\\", "/mnt/c/").replace("\\", "/"),
                # Chemin direct Windows (pour certains environnements)
                filepath,
            ]

            logger.info("üîç open_extraction_file - Tentative de conversion du chemin: %s", filepath)

            # Tester chaque chemin possible
            for test_path in possible_paths:
                if os.path.exists(test_path):
                    filepath = test_path
                    logger.info("‚úÖ open_extraction_file - Chemin trouv√©: %s", filepath)
                    break
            else:
                # Aucun chemin n'existe, utiliser le premier et laisser l'erreur se produire
                filepath = possible_paths[0]
                logger.warning(
                    "‚ö†Ô∏è open_extraction_file - Aucun chemin valide trouv√©, utilisation: %s",
                    filepath,
                )

        # V√©rifier que le fichier existe
        if not os.path.exists(filepath):
            logger.error("‚ùå open_extraction_file - Fichier introuvable: %s", filepath)
            return jsonify({"success": False, "error": f"Fichier introuvable: {filepath}"}), 404

        # Charger les param√®tres pour r√©cup√©rer le chemin de l'√©diteur configur√©
        settings = AppConfig.load_settings_from_disk()
        editor_path = settings.get("paths", {}).get("editor", "")
        logger.info("üîç open_extraction_file - Chemin √©diteur configur√©: %s", editor_path)

        # Construire la commande selon l'√©diteur configur√©
        system = platform.system()
        cmd = None
        editor_name = "√©diteur par d√©faut"

        if editor_path and os.path.exists(editor_path):
            # Utiliser l'√©diteur configur√©
            cmd = [editor_path, filepath]
            editor_name = os.path.basename(editor_path)
            logger.info(
                "‚úÖ open_extraction_file - Utilisation de l'√©diteur configur√©: %s", editor_path
            )

            # Ajouter le num√©ro de ligne si l'√©diteur le supporte
            if line_number:
                # D√©tecter le type d'√©diteur par le nom de l'ex√©cutable
                editor_basename = os.path.basename(editor_path).lower()
                if "code" in editor_basename:  # VS Code
                    cmd.extend(["--goto", f"{filepath}:{line_number}"])
                elif "subl" in editor_basename or "sublime" in editor_basename:  # Sublime Text
                    cmd.extend([f"{filepath}:{line_number}"])
                # Pour les autres √©diteurs, le num√©ro de ligne sera ignor√©
        else:
            # Utiliser l'√©diteur par d√©faut du syst√®me
            logger.warning(
                "‚ö†Ô∏è open_extraction_file - Aucun √©diteur configur√© ou chemin invalide, \
                  utilisation de l'√©diteur par d√©faut"
            )
            if system == "Windows":
                cmd = ["notepad", filepath]
            elif system == "Darwin":  # macOS
                cmd = ["open", "-t", filepath]
            else:  # Linux
                cmd = ["xdg-open", filepath]

        # Ex√©cuter la commande
        try:
            subprocess.Popen(cmd, shell=False)
            message = f"Fichier ouvert avec {editor_name}"
            if line_number and editor_name not in ["code", "subl"]:
                message += f" (num√©ro de ligne {line_number} ignor√©)"
            return jsonify({"success": True, "message": message})
        except FileNotFoundError:
            logger.warning(
                "‚ö†Ô∏è √âditeur %s non trouv√©, tentative avec l'√©diteur par d√©faut", editor_name
            )

            # Fallback vers l'√©diteur par d√©faut du syst√®me
            try:
                if system == "Windows":
                    fallback_cmd = ["notepad", filepath]
                elif system == "Darwin":  # macOS
                    fallback_cmd = ["open", "-t", filepath]
                else:  # Linux
                    fallback_cmd = ["xdg-open", filepath]

                subprocess.Popen(fallback_cmd, shell=False)
                message = (
                    f"Fichier ouvert avec l'√©diteur par d√©faut du syst√®me "
                    f"(√©diteur {editor_name} non trouv√©)"
                )
                if line_number:
                    message += f" (num√©ro de ligne {line_number} ignor√©)"
                return jsonify({"success": True, "message": message})

            except (OSError, subprocess.SubprocessError, RuntimeError) as fallback_error:
                logger.error("‚ùå √âchec du fallback: %s", fallback_error)
                return jsonify(
                    {
                        "success": False,
                        "error": (
                            f"√âditeur {editor_name} non trouv√© et fallback √©chou√©: {fallback_error}"
                        ),
                    }
                ), 400
        except (OSError, subprocess.SubprocessError, RuntimeError) as e:
            logger.error("‚ùå Erreur ouverture fichier: %s", e)
            return jsonify(
                {
                    "success": False,
                    "error": f"Erreur lors de l'ouverture du fichier: {e!s}",
                }
            ), 500

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur ouverture fichier: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


# ============================================================================
# ROUTES DE COH√âRENCE
# ============================================================================


# L'ancienne route /api/coherence/check a √©t√© supprim√©e
# Elle est remplac√©e par /api/coherence/check-svelte qui retourne du JSON structur√©


@API.route("/api/coherence/check-svelte", methods=["POST"])
def check_coherence_svelte():
    """V√©rification de coh√©rence pour l'interface Svelte"""
    try:
        data = request.get_json()
        if not data or "target_path" not in data:
            return jsonify({"success": False, "error": "Chemin cible requis"}), 400

        target_path = data["target_path"]

        # Utiliser le v√©rificateur
        checker = CoherenceChecker(max_workers=4, cache_size=500)

        # Lancer l'analyse et r√©cup√©rer les d√©tails
        result = checker.check_coherence_parallel(
            target_path,
            return_details=True,
        )

        # Extraire les donn√©es du r√©sultat
        if isinstance(result, dict):
            all_issues = result.get("issues", [])
            stats = result.get("stats", {})
        else:
            all_issues = result
            stats = {}

        # Calculer les statistiques si pas d√©j√† calcul√©es
        if not stats:
            unique_files = {issue["file"] for issue in all_issues}
            stats = checker.calculate_statistics(all_issues, len(unique_files))

        # Grouper les probl√®mes par fichier
        issues_by_file = defaultdict(list)
        for issue in all_issues:
            issues_by_file[issue["file"]].append(issue)

        # Pr√©parer la r√©ponse structur√©e pour Svelte
        svelte_result = {
            "stats": {
                "total_issues": stats.get("total_issues", 0),
                "files_analyzed": stats.get("files_analyzed", 0),
                "issues_by_type": stats.get("issues_by_type", {}),
            },
            "issues_by_file": dict(issues_by_file),
            "target_path": target_path,
        }

        return jsonify({"success": True, "result": svelte_result})

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur v√©rification coh√©rence Svelte: %s", e)
        return jsonify({"success": False, "error": f"Erreur lors de la v√©rification: {e!s}"}), 500


@API.route("/api/coherence/options", methods=["GET"])
def get_coherence_options():
    """R√©cup√®re les options de coh√©rence"""
    try:
        checker = CoherenceChecker()
        options = checker.options
        return jsonify({"success": True, "options": options})
    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur r√©cup√©ration options: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


@API.route("/api/coherence/options", methods=["POST"])
def set_coherence_options():
    """Configure les options de coh√©rence"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "error": "Options requises"}), 400

        checker = CoherenceChecker()
        checker.options.update(data)

        return jsonify({"success": True, "message": "Options mises √† jour"})

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur mise √† jour options: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


# ============================================================================
# ROUTES DE RECONSTRUCTION
# ============================================================================


@API.route("/api/reconstruction/validate", methods=["POST"])
def validate_reconstruction_files():
    """Validation des fichiers de reconstruction"""
    try:
        data = request.get_json()
        if not data or "filepath" not in data:
            return jsonify({"success": False, "error": "Chemin de fichier requis"}), 400

        filepath = data["filepath"]

        # Validation basique
        if not os.path.exists(filepath):
            return jsonify({"success": False, "error": "Fichier introuvable"}), 404

        return jsonify({"success": True, "message": "Fichier valide"})

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur validation reconstruction: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


@API.route("/api/reconstruction/reconstruct", methods=["POST"])
def reconstruct_file():
    """Reconstruction d'un fichier"""
    try:
        data = request.get_json()
        if not data or "file_content" not in data or "filepath" not in data:
            return jsonify({"success": False, "error": "Contenu de fichier et chemin requis"}), 400

        file_content = data["file_content"]
        filepath = data["filepath"]
        save_mode = data.get("save_mode", "new_file")

        # Utiliser le reconstructeur
        reconstructor = FileReconstructor(cache_size=100)
        reconstructor.load_file_content(file_content, filepath)
        result = reconstructor.reconstruct_file(save_mode)

        return jsonify({"success": True, "result": result})

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur reconstruction: %s", e)
        return jsonify({"success": False, "error": f"Erreur lors de la reconstruction: {e!s}"}), 500


# ============================================================================
# ROUTES DE PROJET
# ============================================================================


@API.route("/api/project/validate", methods=["POST"])
def validate_project():
    """Validation d'un projet Ren'Py"""
    try:
        data = request.get_json()
        if not data or "project_path" not in data:
            return jsonify({"success": False, "error": "Chemin de projet requis"}), 400

        project_path = data["project_path"]
        project_manager = ProjectManager()
        result = project_manager.validate_project(project_path)

        return jsonify({"success": True, "result": result})

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur validation projet: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


@API.route("/api/project/languages", methods=["POST"])
def scan_project_languages():
    """Scan des langues disponibles dans un projet"""
    try:
        data = request.get_json()
        if not data or "project_path" not in data:
            return jsonify({"success": False, "error": "Chemin de projet requis"}), 400

        project_path = data["project_path"]
        project_manager = ProjectManager()
        languages = project_manager.scan_languages(project_path)

        return jsonify({"success": True, "languages": languages})

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur scan langues: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


@API.route("/api/project/find-root", methods=["POST"])
def find_project_root():
    """Trouve la racine d'un projet Ren'Py √† partir d'un sous-dossier"""
    try:
        data = request.get_json()
        if not data or "subdir_path" not in data:
            return jsonify({"success": False, "error": "Chemin de sous-dossier requis"}), 400

        subdir_path = data["subdir_path"]
        max_levels = data.get("max_levels", 10)

        project_manager = ProjectManager()
        root_path = project_manager.find_project_root(subdir_path, max_levels)

        if root_path:
            return jsonify({"success": True, "root_path": root_path})
        else:
            return jsonify({"success": False, "error": "Racine de projet non trouv√©e"})

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur recherche racine projet: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


@API.route("/api/project/set-current", methods=["POST"])
def set_current_project():
    """D√©finit le projet courant"""
    try:
        data = request.get_json()
        if not data or "project_path" not in data:
            return jsonify({"success": False, "error": "Chemin de projet requis"}), 400

        project_path = data["project_path"]
        project_manager = ProjectManager()
        result = project_manager.set_current_project(project_path)

        return jsonify({"success": result})

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur d√©finition projet courant: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


@API.route("/api/project/summary", methods=["POST"])
def get_project_summary():
    """Obtient un r√©sum√© du projet"""
    try:
        data = request.get_json()
        if not data or "project_path" not in data:
            return jsonify({"success": False, "error": "Chemin de projet requis"}), 400

        project_path = data["project_path"]
        project_manager = ProjectManager()
        summary = project_manager.get_project_summary(project_path)

        return jsonify({"success": True, "summary": summary})

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur r√©sum√© projet: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


@API.route("/api/project/files", methods=["POST"])
def get_project_files():
    """Obtient la liste des fichiers du projet"""
    try:
        data = request.get_json()
        if not data or "project_path" not in data:
            return jsonify({"success": False, "error": "Chemin de projet requis"}), 400

        project_path = data["project_path"]
        file_type = data.get("file_type", "all")
        language = data.get("language")
        project_manager = ProjectManager()
        files = project_manager.get_project_files(project_path, file_type, language)

        return jsonify({"success": True, "files": files})

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur fichiers projet: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


@API.route("/api/project/load-file", methods=["POST"])
def load_project_file():
    """Charge le contenu d'un fichier de projet"""
    try:
        data = request.get_json()
        if not data or "filepath" not in data:
            return jsonify({"success": False, "error": "Chemin de fichier requis"}), 400

        filepath = data["filepath"]
        project_manager = ProjectManager()
        result = project_manager.load_file_content(filepath)

        return jsonify(result)

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur chargement fichier: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


# ============================================================================
# ROUTES DE CONFIGURATION
# ============================================================================


@API.route("/api/settings", methods=["GET"])
def get_settings():
    """R√©cup√®re les param√®tres de l'application"""
    try:
        settings = AppConfig.load_settings_from_disk()
        return jsonify({"success": True, "settings": settings})
    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur r√©cup√©ration param√®tres: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


@API.route("/api/settings", methods=["POST"])
def update_settings():
    """Met √† jour les param√®tres de l'application"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "error": "Param√®tres requis"}), 400

        AppConfig.save_settings_to_disk(data)
        return jsonify({"success": True, "message": "Param√®tres mis √† jour"})

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur mise √† jour param√®tres: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


# ============================================================================
# ROUTES DE MISE √Ä JOUR
# ============================================================================


@API.route("/api/updates/check", methods=["GET"])
def check_for_updates():
    """V√©rifie les mises √† jour disponibles"""
    try:
        update_manager = UpdateManager(
            AppConfig.GITHUB_REPO_OWNER,
            AppConfig.GITHUB_REPO_NAME,
            AppConfig.APP_VERSION,
        )
        result = update_manager.check_for_updates()
        return jsonify(result)
    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur v√©rification mises √† jour: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


@API.route("/api/updates/download", methods=["POST"])
def download_update():
    """T√©l√©charge une mise √† jour"""
    try:
        data = request.get_json()
        if not data or "download_url" not in data:
            return jsonify({"success": False, "error": "URL de t√©l√©chargement requise"}), 400

        download_url = data["download_url"]
        update_manager = UpdateManager(
            AppConfig.GITHUB_REPO_OWNER,
            AppConfig.GITHUB_REPO_NAME,
            AppConfig.APP_VERSION,
        )
        result = update_manager.download_update(download_url)

        return jsonify(result)

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur t√©l√©chargement: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


# ============================================================================
# ROUTES UTILITAIRES
# ============================================================================


@API.route("/api/file-dialog/open", methods=["POST"])
def open_dialog():
    """Ouvre un dialogue de s√©lection de fichier ou dossier"""
    try:
        # R√©cup√©rer les param√®tres de la requ√™te
        data = request.get_json() or {}
        dialog_type = data.get("dialog_type", "file")
        title = data.get("title", "S√©lectionner un fichier")
        initialdir = data.get("initialdir", "")
        filetypes = data.get(
            "filetypes", [("Fichiers Ren'Py", "*.rpy"), ("Tous les fichiers", "*.*")]
        )

        # Cr√©er une fen√™tre tkinter cach√©e
        root = tk.Tk()
        root.withdraw()  # Cacher la fen√™tre principale

        selected_path = None

        if dialog_type == "folder":
            # Ouvrir le dialogue de dossier
            selected_path = filedialog.askdirectory(title=title, initialdir=initialdir)
        else:
            # Ouvrir le dialogue de fichier
            selected_path = filedialog.askopenfilename(
                title=title,
                initialdir=initialdir,
                filetypes=filetypes,
            )

        # Fermer la fen√™tre tkinter
        root.destroy()

        if selected_path:
            return jsonify(
                {
                    "success": True,
                    "path": selected_path,
                    "message": "S√©lectionn√©: " + selected_path,
                }
            )
        else:
            return jsonify({"success": False, "message": "Aucune s√©lection"})

    except ImportError:
        # Fallback si tkinter n'est pas disponible
        logger.warning("tkinter non disponible, utilisation du fallback")
        return jsonify(
            {
                "success": False,
                "error": "tkinter non disponible sur ce syst√®me",
                "message": "Veuillez installer tkinter ou utiliser un autre syst√®me",
            }
        )
    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur dialogue fichier: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


@API.route("/api/file-dialog/save", methods=["POST"])
def save_dialog():
    """Ouvre un dialogue de sauvegarde"""
    try:
        # Impl√©mentation simplifi√©e
        return jsonify(
            {"success": True, "message": "Dialogue de sauvegarde (impl√©mentation simplifi√©e)"},
        )

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur dialogue sauvegarde: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


# ============================================================================
# ROUTE RACINE
# ============================================================================


# ============================================================================
# ROUTES DE TRADUCTION
# ============================================================================


@API.route("/api/translator/translate", methods=["POST"])
def translate_text():
    """Traduction de texte (fonctionnalit√© optionnelle)"""
    try:
        data = request.get_json()
        if not data or "text" not in data:
            return jsonify({"success": False, "error": "Texte √† traduire requis"}), 400

        text = data["text"]
        target_language = data.get("target_language", "fr")

        # Impl√©mentation simplifi√©e (pas de vraie traduction)
        return jsonify(
            {
                "success": True,
                "original_text": text,
                "translated_text": f"[Traduit en {target_language}] {text}",
                "target_language": target_language,
            },
        )

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur traduction: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


# ============================================================================
# ROUTES DE BACKUP
# ============================================================================


@API.route("/api/backup/create", methods=["POST"])
def create_backup():
    """Cr√©ation d'une sauvegarde"""
    try:
        data = request.get_json()
        if not data or "project_path" not in data:
            return jsonify({"success": False, "error": "Chemin de projet requis"}), 400

        project_path = data["project_path"]
        backup_manager = BackupManager()
        result = backup_manager.create_backup(project_path)

        return jsonify({"success": True, "result": result})

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur cr√©ation backup: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


@API.route("/api/backup/restore", methods=["POST"])
def restore_backup():
    """Restauration d'une sauvegarde"""
    try:
        data = request.get_json()
        if not data or "backup_path" not in data:
            return jsonify({"success": False, "error": "Chemin de sauvegarde requis"}), 400

        # Note: restore_backup method needs to be implemented in BackupManager
        result = {"success": False, "error": "Fonctionnalit√© non impl√©ment√©e"}

        return jsonify({"success": True, "result": result})

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur restauration backup: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


@API.route("/api/backup/list", methods=["GET"])
def list_backups():
    """Liste des sauvegardes disponibles"""
    try:
        # R√©cup√©rer les param√®tres de filtrage
        game_filter = request.args.get("game")
        type_filter = request.args.get("type")

        # Utiliser le BackupManager pour lister les sauvegardes
        backup_manager = BackupManager()
        backups = backup_manager.list_all_backups(game_filter, type_filter)

        return jsonify({"success": True, "backups": backups})

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur liste backups: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


# ============================================================================
# ROUTES DE FICHIERS ET DOSSIERS
# ============================================================================


@API.route("/api/file-dialog/save-path", methods=["POST"])
def set_save_path():
    """D√©finit le chemin de sauvegarde"""
    try:
        data = request.get_json()
        if not data or "path" not in data:
            return jsonify({"success": False, "error": "Chemin requis"}), 400

        path = data["path"]
        # Ici on pourrait sauvegarder le chemin dans les param√®tres

        return jsonify({"success": True, "path": path, "message": "Chemin de sauvegarde d√©fini"})

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur d√©finition chemin: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


# ============================================================================
# ROUTES DE MISE √Ä JOUR (compl√©t√©es)
# ============================================================================


@API.route("/api/updates/install", methods=["POST"])
def install_update():
    """Installe une mise √† jour"""
    try:
        # Note: install_update method needs executable_path parameter
        result = {"success": False, "error": "Fonctionnalit√© non impl√©ment√©e"}

        return jsonify(result)

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur installation: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


@API.route("/api/updates/config", methods=["GET"])
def get_update_config():
    """R√©cup√®re la configuration des mises √† jour"""
    try:
        update_manager = UpdateManager(
            AppConfig.GITHUB_REPO_OWNER,
            AppConfig.GITHUB_REPO_NAME,
            AppConfig.APP_VERSION,
        )
        config = update_manager.get_config()

        return jsonify({"success": True, "config": config})

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur config updates: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


@API.route("/api/updates/config", methods=["POST"])
def update_update_config():
    """Met √† jour la configuration des mises √† jour"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "error": "Configuration requise"}), 400

        # Note: update_config method needs to be implemented
        result = {"success": False, "error": "Fonctionnalit√© non impl√©ment√©e"}

        return jsonify(result)

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur mise √† jour config: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


@API.route("/api/updates/auto-check", methods=["GET"])
def should_auto_check():
    """V√©rifie si la v√©rification automatique est activ√©e"""
    try:
        # Note: should_auto_check method needs to be implemented
        auto_check = AppConfig.AUTO_CHECK_UPDATES

        return jsonify({"success": True, "auto_check": auto_check})

    except (OSError, ValueError, TypeError) as e:
        logger.error("Erreur auto-check: %s", e)
        return jsonify({"success": False, "error": f"Erreur: {e!s}"}), 500


# ============================================================================
# ROUTE RACINE
# ============================================================================


@API.route("/")
def index():
    """Route racine - sert l'interface Svelte"""
    static_folder = current_app.static_folder
    index_path = os.path.join(static_folder, "index.html")

    logger.info("üîç Tentative de chargement de l'interface Svelte")
    logger.info("üìÅ Dossier statique: %s", static_folder)
    logger.info("üìÑ Chemin index.html: %s", index_path)
    logger.info("‚úÖ Fichier existe: %s", os.path.exists(index_path))

    if not os.path.exists(index_path):
        logger.error("‚ùå Interface Svelte non trouv√©e: %s", index_path)
        return jsonify(
            {
                "error": "Interface Svelte non trouv√©e",
                "message": "Veuillez compiler l'application avec: pnpm run build",
                "static_folder": static_folder,
                "index_path": index_path,
            }
        ), 404

    logger.info("‚úÖ Interface Svelte trouv√©e, envoi du fichier")
    return send_from_directory(static_folder, "index.html")


@API.route("/<path:filename>")
def serve_static(filename):
    """Sert les fichiers statiques de SvelteKit"""
    static_folder = current_app.static_folder
    file_path = os.path.join(static_folder, filename)

    logger.debug("üìÅ Demande de fichier statique: %s", filename)
    logger.debug("üìÑ Chemin complet: %s", file_path)
    logger.debug("‚úÖ Fichier existe: %s", os.path.exists(file_path))

    if not os.path.exists(file_path):
        logger.warning("‚ö†Ô∏è Fichier statique non trouv√©: %s", filename)
        return jsonify({"error": "Fichier non trouv√©: " + filename}), 404

    return send_from_directory(static_folder, filename)


@API.route("/api")
def api_info():
    """Route d'information de l'API"""
    return jsonify(
        {
            "message": "RenExtract v2 API - Structure r√©organis√©e",
            "version": "2.0",
            "status": "active",
            "endpoints": [
                "/api/health",
                "/api/items",
                "/api/extraction/*",
                "/api/coherence/*",
                "/api/reconstruction/*",
                "/api/project/*",
                "/api/settings",
                "/api/updates/*",
                "/api/backup/*",
                "/api/translator/*",
                "/api/file-dialog/*",
            ],
        },
    )
