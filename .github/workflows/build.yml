name: Build Application

permissions:
  contents: write
  pull-requests: write

on:
  pull_request:
    branches: [main, preview]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.13']
        exclude:
          - os: macos-latest
            python-version: '3.13'
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '24'

      - name: Install pnpm
        run: |
          npm install -g pnpm

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      - name: Install Node.js dependencies
        run: |
          pnpm install

      - name: Build frontend (Svelte)
        run: |
          pnpm run build

      - name: Verify frontend build
        run: |
          test -f "dist/index.html" || (echo "ERROR: Frontend build failed - dist/index.html not found" && exit 1)
          echo "Frontend build verified successfully"

      - name: Build executable with PyInstaller
        run: |
          python build_exe.py

      - name: Verify executable build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $exe = Get-ChildItem "dist/app-windows-v*.exe" | Select-Object -First 1
          if (!$exe) {
            Write-Error "ERROR: Windows executable not found"
            exit 1
          }
          Write-Host "Windows executable verified: $($exe.Name)"

      - name: Verify executable build (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          exe=$(find dist -name "app-*-v*" -not -name "*.exe" | head -1)
          if [ -z "$exe" ]; then
            echo "ERROR: Unix executable not found"
            exit 1
          fi
          echo "Unix executable verified: $(basename $exe)"

      - name: Get version from package.json
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Upload executable as artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.os }}-v${{ steps.version.outputs.version }}
          path: |
            dist/app-*-v*
          retention-days: 30

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs-${{ matrix.os }}-python${{ matrix.python-version }}
          path: |
            build/
          retention-days: 7
