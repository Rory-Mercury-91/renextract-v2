name: Create Release

permissions:
  contents: write

on:
  push:
    branches: [main, preview]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.13']
        exclude:
          - os: macos-latest
            python-version: '3.13'
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '24'

      - name: Install pnpm
        run: |
          npm install -g pnpm

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      - name: Install Node.js dependencies
        run: |
          pnpm install

      - name: Build frontend (Svelte)
        run: |
          pnpm run build

      - name: Verify frontend build
        run: |
          test -f "dist/index.html" || (echo "ERROR: Frontend build failed - dist/index.html not found" && exit 1)
          echo "Frontend build verified successfully"

      - name: Build executable with PyInstaller
        run: |
          python build_exe.py

      - name: Verify executable build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $exe = Get-ChildItem "dist/app-windows-v*.exe" | Select-Object -First 1
          if (!$exe) {
            Write-Error "ERROR: Windows executable not found"
            exit 1
          }
          Write-Host "Windows executable verified: $($exe.Name)"

      - name: Verify executable build (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          exe=$(find dist -name "app-*-v*" -not -name "*.exe" | head -1)
          if [ -z "$exe" ]; then
            echo "ERROR: Unix executable not found"
            exit 1
          fi
          echo "Unix executable verified: $(basename $exe)"

      - name: Get version from package.json
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Upload executable as artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.os }}-v${{ steps.version.outputs.version }}
          path: |
            dist/app-*-v*
          retention-days: 30

  # Job to create an automatic release
  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create release archive
        run: |
          mkdir -p release
          # Organize artifacts by OS
          for artifact_dir in artifacts/*/; do
            os_name=$(basename "$artifact_dir")
            mkdir -p "release/$os_name"
            cp "$artifact_dir"/* "release/$os_name/" 2>/dev/null || true
          done

          # Create a README for the release
          cat > release/README.md << 'EOF'
          # RenExtract v2

          ## Download

          Choose the executable corresponding to your operating system:

          - **Windows** : `app-windows-v*.exe`
          - **Linux** : `app-linux-v*` (make executable with `chmod +x`)
          - **macOS** : `app-macos-v*` (make executable with `chmod +x`)

          ## Usage

          Double-click the executable or run it from the terminal.

          ## Features

          - Automatic updates via GitHub releases
          - Ren'Py game extraction and reconstruction
          - Modern Svelte 5 interface
          - Cross-platform support

          ## Notes

          - The application includes all necessary dependencies
          - No additional installation is required
          - The executable is standalone and portable
          EOF

      - name: Get version from package.json
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/**/*
          tag_name: v${{ steps.version.outputs.version }}
          name: RenExtract v${{ steps.version.outputs.version }}
          body: |
            ## 🚀 RenExtract v${{ steps.version.outputs.version }} is now available!

            This release contains executables for all supported operating systems.

            ### 📦 Downloads

            - **Windows** : `app-windows-v${{ steps.version.outputs.version }}.exe`
            - **Linux** : `app-linux-v${{ steps.version.outputs.version }}`
            - **macOS** : `app-macos-v${{ steps.version.outputs.version }}`

            ### ✨ What's New

            - 🆕 **Automatic Updates**: The app can now update itself automatically via GitHub releases
            - 🎨 **Modern UI**: Built with Svelte 5 and Tailwind CSS
            - 🔧 **Improved Build System**: Automated builds and releases via GitHub Actions
            - 🐛 **Bug Fixes**: Various improvements and stability enhancements

            ### 🔧 Technical Details

            - Automatic build from `${{ github.ref_name }}` branch
            - Python 3.13+
            - Compiled Svelte 5 frontend
            - Standalone PyInstaller executable
            - Cross-platform support (Windows, Linux, macOS)

            ### 📋 Installation Instructions

            1. Download the executable corresponding to your OS
            2. Launch the application (double-click or terminal)
            3. The app will automatically check for updates on startup
            4. No additional installation required!

            ### 🔄 Automatic Updates

            This version includes automatic update functionality:
            - Checks for updates on startup
            - Downloads and installs updates automatically
            - Configurable update settings in the app
          draft: false
          prerelease: ${{ github.ref == 'refs/heads/preview' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
