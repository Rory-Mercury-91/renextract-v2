From ba9268895cb23a15ad12271c64213867af4c3dbe Mon Sep 17 00:00:00 2001
From: Rory-Mercury-91 <a.fergani91@pm.me>
Date: Fri, 3 Oct 2025 18:53:40 +0200
Subject: [PATCH 2/2] :lipstick: Add button Restor to for backup tab

---
 app.py                       | 45 ++++++++++++++++++++++++++++++++++++
 src/components/Backup.svelte | 37 ++++++++++++++++++++++++++++-
 src/lib/api.ts               | 15 ++++++++++++
 3 files changed, 96 insertions(+), 1 deletion(-)

diff --git a/app.py b/app.py
index 233947f..8aa042b 100644
--- a/app.py
+++ b/app.py
@@ -109,6 +109,51 @@ def restore_backup(backup_id):
             'error': str(e)
         }), 500
 
+@app.route('/api/backups/<backup_id>/restore-to', methods=['POST'])
+def restore_backup_to(backup_id):
+    """Restaure une sauvegarde vers un chemin sp√©cifique"""
+    try:
+        data = request.get_json()
+        if not data or 'target_path' not in data:
+            return jsonify({
+                'success': False,
+                'error': 'Chemin de destination requis'
+            }), 400
+        
+        target_path = data['target_path']
+        
+        # Trouver le backup dans les m√©tadonn√©es
+        if backup_id not in backup_manager.metadata:
+            return jsonify({
+                'success': False,
+                'error': 'Sauvegarde introuvable'
+            }), 404
+        
+        backup = backup_manager.metadata[backup_id]
+        
+        # V√©rifier que le r√©pertoire de destination existe
+        target_dir = os.path.dirname(target_path)
+        if not os.path.exists(target_dir):
+            return jsonify({
+                'success': False,
+                'error': 'R√©pertoire de destination inexistant'
+            }), 400
+        
+        # Copier le fichier vers la destination
+        import shutil
+        shutil.copy2(backup['backup_path'], target_path)
+        
+        return jsonify({
+            'success': True,
+            'message': f'Fichier restaur√© vers {target_path}'
+        })
+        
+    except Exception as e:
+        return jsonify({
+            'success': False,
+            'error': str(e)
+        }), 500
+
 @app.route('/api/backups/<backup_id>', methods=['DELETE'])
 def delete_backup(backup_id):
     """Supprime une sauvegarde"""
diff --git a/src/components/Backup.svelte b/src/components/Backup.svelte
index 4b71bae..5b8843c 100644
--- a/src/components/Backup.svelte
+++ b/src/components/Backup.svelte
@@ -114,6 +114,34 @@
     }
   }
 
+  async function restoreBackupTo(backup: any) {
+    // Ouvrir le dialogue de s√©lection de fichier
+    const result = await apiService.openFileDialog();
+    
+    if (!result.success || !result.path) {
+      return;
+    }
+
+    if (!confirm(`Restaurer la sauvegarde vers :\n\n‚Ä¢ Destination : ${result.path}\n‚Ä¢ Fichier : ${backup.source_filename}\n‚Ä¢ Jeu : ${backup.game_name}\n‚Ä¢ Type : ${BACKUP_DESCRIPTIONS[backup.type as keyof typeof BACKUP_DESCRIPTIONS] || backup.type}\n\nLe fichier de destination sera remplac√© !`)) {
+      return;
+    }
+
+    try {
+      statusMessage = 'üîÑ Restauration vers destination en cours...';
+      const restoreResult = await apiService.restoreBackupTo(backup.id, result.path);
+      
+      if (restoreResult.success) {
+        statusMessage = '‚úÖ Restauration vers destination termin√©e avec succ√®s';
+      } else {
+        statusMessage = '‚ùå Erreur lors de la restauration vers destination';
+        alert(`Erreur : ${restoreResult.error}`);
+      }
+    } catch (err) {
+      statusMessage = '‚ùå Erreur lors de la restauration vers destination';
+      alert(`Erreur : ${err instanceof Error ? err.message : 'Erreur inconnue'}`);
+    }
+  }
+
   async function deleteBackup(backup: any) {
     if (!confirm(`Supprimer d√©finitivement cette sauvegarde ?\n\n‚Ä¢ Fichier : ${backup.source_filename}\n‚Ä¢ Jeu : ${backup.game_name}\n‚Ä¢ Taille : ${formatSize(backup.size)}\n\nCette action est irr√©versible !`)) {
       return;
@@ -290,10 +318,17 @@
                       <button
                         class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm transition-colors"
                         onclick={() => restoreBackup(backup)}
-                        title="Restaurer"
+                        title="Restaurer vers l'emplacement d'origine"
                       >
                         üíæ Restaurer
                       </button>
+                      <button
+                        class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded text-sm transition-colors"
+                        onclick={() => restoreBackupTo(backup)}
+                        title="Restaurer vers un emplacement choisi"
+                      >
+                        üìÅ Restaurer vers
+                      </button>
                       <button
                         class="px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded text-sm transition-colors"
                         onclick={() => deleteBackup(backup)}
diff --git a/src/lib/api.ts b/src/lib/api.ts
index 92f8237..2605a99 100644
--- a/src/lib/api.ts
+++ b/src/lib/api.ts
@@ -112,6 +112,21 @@ export const apiService = {
     }
   },
 
+  async restoreBackupTo(backupId: string, targetPath: string): Promise<BackupActionResponse> {
+    try {
+      const response = await api.post(`/backups/${backupId}/restore-to`, {
+        target_path: targetPath
+      });
+      return response.data;
+    } catch (error) {
+      console.error('Restore Backup To Error:', error);
+      return {
+        success: false,
+        error: error instanceof Error ? error.message : 'Unknown error'
+      };
+    }
+  },
+
   async deleteBackup(backupId: string): Promise<BackupActionResponse> {
     try {
       const response = await api.delete(`/backups/${backupId}`);
-- 
2.51.0

